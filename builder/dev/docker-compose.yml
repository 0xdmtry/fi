services:
  app-authorizer:
    container_name: app-authorizer
    build:
      context: ../../app/authorizer
      dockerfile: Authorizer.dev.dockerfile
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ../../app/authorizer/src:/app/src
      - ../../app/authorizer/migration:/app/migration
      - ../../app/authorizer/tests:/app/tests
      - ../../app/authorizer/Cargo.toml:/app/Cargo.toml
      - ../../app/authorizer/Cargo.lock:/app/Cargo.lock
      - /app/target
    depends_on:
      db-app-authorizer:
        condition: service_started
      app-emailer:
        condition: service_started
    networks:
      - fi-network

  db-app-authorizer:
    container_name: db-app-authorizer
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_DB: authorizer
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - .dbdata/postgres/dev/authorizer/:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - fi-network

  app-emailer:
    container_name: app-emailer
    build:
      context: ../../app/emailer
      dockerfile: Emailer.dev.dockerfile
    restart: always
    depends_on:
      db-app-emailer:
        condition: service_started
    ports:
      - "8001:8001"
    volumes:
      - ../../app/emailer/src:/app/src
      - ../../app/emailer/migration:/app/migration
      - ../../app/emailer/tests:/app/tests
      - ../../app/emailer/Cargo.toml:/app/Cargo.toml
      - ../../app/emailer/Cargo.lock:/app/Cargo.lock
      - /app/target
    networks:
      - fi-network

  db-app-emailer:
    container_name: db-app-emailer
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_DB: emailer
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - .dbdata/postgres/dev/emailer/:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - fi-network

  mailhog:
    container_name: mailhog
    image: "mailhog/mailhog:latest"
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - fi-network

networks:
  fi-network:
    driver: bridge




#####################################################

#services:
#  #  fe:
#  #    container_name: fe
#  #    build:
#  #      context: ../fe
#  #      dockerfile: Dockerfile
#  #    ports:
#  #      - "3000:3000"
#  #    volumes:
#  #      - ./../fe:/app
#  #      - /app/node_modules
#  #      - /app/.next
#  #    environment:
#  #      - NODE_ENV=development
#  #    command: npm run dev
#  #    networks:
#  #      - fi-network
#
#  fi-api:
#    container_name: fi-api
#    build:
#      context: ..
#      dockerfile: ./../app/api/Api.dev.dockerfile
#    restart: always
#    ports:
#      - "8000:8000"
#    volumes:
#      - ./../app/api:/app/api
#      - /app/api/target  # Avoid using cached target from host
#    #    depends_on:
#    #      fi-api-db:
#    #        condition: service_healthy
#    #      mailhog:
#    #        condition: service_started
#    networks:
#      - fi-network
#
##  fi-api-db:
##    container_name: fi-api-db
##    image: postgres:17.4
##    restart: always
##    environment:
##      POSTGRES_DB: fiapi
##      POSTGRES_USER: root
##      POSTGRES_PASSWORD: root
##    volumes:
##      - .dbdata/postgres/:/var/lib/postgresql/data
##    healthcheck:
##      test: ["CMD-SHELL", "pg_isready -U root"]
##      interval: 5s
##      timeout: 5s
##      retries: 3
##    ports:
##      - "5432:5432"
##    networks:
##      - fi-network
##
##  mailhog:
##    container_name: mailhog:1.0.1
##    image: "mailhog/mailhog:latest"
##    ports:
##      - "1025:1025"
##      - "8025:8025"
##    networks:
##      - fi-network
#
#networks:
#  fi-network:
#    driver: bridge
