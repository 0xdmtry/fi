services:

  # Authorizer: App
  app-authorizer:
    container_name: app-authorizer
    build:
      context: ../../app/authorizer
      dockerfile: Authorizer.dev.dockerfile
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ../../app/authorizer/src:/app/src
      - ../../app/authorizer/migration:/app/migration
      - ../../app/authorizer/tests:/app/tests
      - ../../app/authorizer/Cargo.toml:/app/Cargo.toml
      - ../../app/authorizer/Cargo.lock:/app/Cargo.lock
      - /app/target
    depends_on:
      db-app-authorizer:
        condition: service_started
      app-emailer:
        condition: service_started
    networks:
      - fi-network

  # Authorizer: DB
  db-app-authorizer:
    container_name: db-app-authorizer
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_DB: authorizer
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - .dbdata/postgres/dev/authorizer/:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - fi-network

  # Emailer: App
  app-emailer:
    container_name: app-emailer
    build:
      context: ../../app/emailer
      dockerfile: Emailer.dev.dockerfile
    restart: always
    depends_on:
      db-app-emailer:
        condition: service_started
    ports:
      - "8001:8001"
    volumes:
      - ../../app/emailer/src:/app/src
      - ../../app/emailer/migration:/app/migration
      - ../../app/emailer/tests:/app/tests
      - ../../app/emailer/Cargo.toml:/app/Cargo.toml
      - ../../app/emailer/Cargo.lock:/app/Cargo.lock
      - /app/target
    networks:
      - fi-network


  # Emailer: DB
  db-app-emailer:
    container_name: db-app-emailer
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_DB: emailer
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - .dbdata/postgres/dev/emailer/:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - fi-network


  #  Emailer: Mailhog
  mailhog:
    container_name: mailhog
    image: "mailhog/mailhog:latest"
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - fi-network

  #  Solana: Walletor: App
  dapp-solana-walletor:
    container_name: dapp-solana-walletor
    build:
      context: ../../dapp/solana/walletor
      dockerfile: Walletor.dev.dockerfile
    restart: always
    depends_on:
      db-dapp-solana-walletor:
        condition: service_started
    ports:
      - "8002:8002"
    volumes:
      - ../../dapp/solana/walletor/src:/app/src
      - ../../dapp/solana/walletor/migration:/app/migration
      - ../../dapp/solana/walletor/tests:/app/tests
      - ../../dapp/solana/walletor/Cargo.toml:/app/Cargo.toml
      - ../../dapp/solana/walletor/Cargo.lock:/app/Cargo.lock
      - /app/target
    networks:
      - fi-network

  #  Solana: Walletor: DB
  db-dapp-solana-walletor:
    container_name: db-dapp-solana-walletor
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_DB: walletor
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - .dbdata/postgres/dev/solana_walletor/:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - fi-network

  #  Solana: Aggregator
  dapp-solana-ts-agg:
    container_name: dapp-solana-ts-agg
    build:
      context: ../../dapp/solana/aggregator/ts-agg
      dockerfile: TsAgg.dev.dockerfile
    restart: always
    ports:
      - "8003:8003"
    volumes:
      - ../../dapp/solana/aggregator/ts-agg:/app
      - /app/node_modules
    networks:
      - fi-network

  #  Solana: Tx: App
  dapp-solana-tx:
    container_name: dapp-solana-tx
    build:
      context: ../../dapp/solana/tx
      dockerfile: Tx.dev.dockerfile
    restart: always
    depends_on:
      db-dapp-solana-tx:
        condition: service_started
    ports:
      - "8005:8002"
    volumes:
      - ../../dapp/solana/tx/src:/app/src
      - ../../dapp/solana/tx/migration:/app/migration
      - ../../dapp/solana/tx/tests:/app/tests
      - ../../dapp/solana/tx/Cargo.toml:/app/Cargo.toml
      - ../../dapp/solana/tx/Cargo.lock:/app/Cargo.lock
      - /app/target
    networks:
      - fi-network

  #  Solana: Tx: DB
  db-dapp-solana-tx:
    container_name: db-dapp-solana-tx
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_DB: tx
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - .dbdata/postgres/dev/solana_tx/:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - fi-network

  #  Observability: Prometheus
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - fi-network

  #  Observability: Grafana
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - fi-network

networks:
  fi-network:
    driver: bridge




#####################################################
#services:
#  #  fe:
#  #    container_name: fe
#  #    build:
#  #      context: ../fe
#  #      dockerfile: Dockerfile
#  #    ports:
#  #      - "3000:3000"
#  #    volumes:
#  #      - ./../fe:/app
#  #      - /app/node_modules
#  #      - /app/.next
#  #    environment:
#  #      - NODE_ENV=development
#  #    command: npm run dev
#  #    networks:
#  #      - fi-network

